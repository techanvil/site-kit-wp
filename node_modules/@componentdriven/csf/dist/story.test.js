"use strict";

var _complexKind$paramete, _complexKind$paramete2, _looseKind$parameters;

// NOTE Types defined in @storybook/addons
// NOTE Example of internal type definition for @storybook/<framework>
// NOTE Examples of using types from @storybook/<framework> in real project
var Button = function Button() {
  return 'Button';
};

var Input = function Input() {
  return 'Input';
}; // NOTE Various kind usages


var simple = {
  title: 'simple'
};
var withUnknownComponent = {
  title: 'component',
  component: Button
};
var withTypedComponent = {
  title: 'buttonComponent',
  component: Button
};
var withDecorator = {
  title: 'withDecorator',
  decorators: [function (storyFn, context) {
    return "withDecorator(".concat(storyFn(context), ")");
  }]
};
var looseParameters = {
  title: 'looseKind',
  parameters: {
    a: function a() {
      return null;
    },
    b: NaN,
    c: Symbol('symbol')
  }
};
var strictParameters = {
  title: 'strictKind',
  parameters: {
    a: 1,
    b: function b() {
      /* noop */
    },
    c: [Promise.resolve('string')]
  }
};
var complexKind = {
  id: 'button',
  title: 'Button',
  component: Button,
  subcomponents: {
    input: Input
  },
  decorators: [function (storyFn, context) {
    return "withDecorator(".concat(storyFn(context), ")");
  }],
  parameters: {
    a: '1',
    b: 2,
    c: null
  }
}; // NOTE Various story usages

var Simple = function Simple() {
  return 'Simple';
};

var NamedStory = function NamedStory() {
  return 'Named Story';
};

NamedStory.story = {
  name: 'Another name for story'
};

var DecoratedStory = function DecoratedStory() {
  return 'Body';
};

DecoratedStory.story = {
  decorators: [function (storyFn) {
    return "Wrapped(".concat(storyFn());
  }]
};
var LooseStory = Button;
LooseStory.story = {
  parameters: {
    a: [1, '2', {}],
    b: undefined,
    c: Button
  }
};

var StrictStory = function StrictStory() {
  return Input();
};

StrictStory.story = {
  parameters: {
    a: ['1', '2'],
    b: Simple,
    c: function c(storyFn, context) {
      return "withDecorator(".concat(storyFn(context), ")");
    }
  }
};

var ComplexStory = function ComplexStory() {
  return "Once upon a time, there was a ".concat(Button(), "...");
};

Simple.story = {
  name: 'simple story of lonely button',
  decorators: [function (storyFn, context) {
    return "Storyteller: '".concat(storyFn(context), "'");
  }],
  parameters: {
    d: [],
    e: {},
    f: function f() {
      return null;
    }
  }
}; // NOTE Comparison difference between strict and loose parameters typing

var looseKind = complexKind;
var strictA = (_complexKind$paramete = (_complexKind$paramete2 = complexKind.parameters) === null || _complexKind$paramete2 === void 0 ? void 0 : _complexKind$paramete2.a) !== null && _complexKind$paramete !== void 0 ? _complexKind$paramete : '';
var looseA = (_looseKind$parameters = looseKind.parameters) === null || _looseKind$parameters === void 0 ? void 0 : _looseKind$parameters.a; // NOTE Jest forced to define at least one test in file

describe('story', function () {
  test('kinds', function () {
    return expect(looseA).toBe(strictA);
  });
});